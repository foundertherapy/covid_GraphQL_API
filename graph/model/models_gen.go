// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CountriesConnection struct {
	PageInfo *PageInfo      `json:"pageInfo"`
	Edges    []*CountryEdge `json:"edges"`
}

type Country struct {
	ID         string                    `json:"id"`
	Name       string                    `json:"name"`
	Code       string                    `json:"code"`
	CovidStats *CovidStatisticConnection `json:"covidStats,omitempty"`
}

type CountryEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Country `json:"node"`
}

type CountryFilterInput struct {
	NameContains *string `json:"nameContains,omitempty"`
	CodeEquals   *string `json:"codeEquals,omitempty"`
}

type CountryInput struct {
	Name string `json:"name"`
	Code string `json:"code"`
}

type CovidStatistic struct {
	ID        string   `json:"id"`
	Country   *Country `json:"country"`
	Date      string   `json:"date"`
	Confirmed int      `json:"confirmed"`
	Recovered int      `json:"recovered"`
	Deaths    int      `json:"deaths"`
}

type CovidStatisticConnection struct {
	PageInfo *PageInfo             `json:"pageInfo"`
	Edges    []*CovidStatisticEdge `json:"edges"`
}

type CovidStatisticEdge struct {
	Cursor string          `json:"cursor"`
	Node   *CovidStatistic `json:"node"`
}

type CovidStatisticInput struct {
	CountryID string `json:"countryID"`
	Date      string `json:"date"`
	Confirmed int    `json:"confirmed"`
	Recovered int    `json:"recovered"`
	Deaths    int    `json:"deaths"`
}

type LoginResponse struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type PageInfo struct {
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage bool    `json:"hasNextPage"`
}

type User struct {
	ID                 string     `json:"id"`
	Username           string     `json:"username"`
	Email              string     `json:"email"`
	Password           string     `json:"password"`
	MonitoredCountries []*Country `json:"monitoredCountries"`
}

type CaseType string

const (
	CaseTypeConfirmed CaseType = "CONFIRMED"
	CaseTypeDeaths    CaseType = "DEATHS"
)

var AllCaseType = []CaseType{
	CaseTypeConfirmed,
	CaseTypeDeaths,
}

func (e CaseType) IsValid() bool {
	switch e {
	case CaseTypeConfirmed, CaseTypeDeaths:
		return true
	}
	return false
}

func (e CaseType) String() string {
	return string(e)
}

func (e *CaseType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CaseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CaseType", str)
	}
	return nil
}

func (e CaseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
